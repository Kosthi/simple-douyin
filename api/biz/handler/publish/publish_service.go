// Code generated by hertz generator.

package publish

import (
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/jwt"
	apiLog "github.com/prometheus/common/log"
	"simple-douyin/api/biz/client"
	mw "simple-douyin/api/biz/middleware"
	bizPublish "simple-douyin/api/biz/model/publish"
	kitexPublish "simple-douyin/kitex_gen/publish"
)

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var bizReq bizPublish.PublishActionRequest
	resp := new(bizPublish.PublishActionResponse)
	err = c.BindAndValidate(&bizReq)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 该接口需要登录态，需要确认具体身份，仅在路由时鉴权即可
	// 通过中间件获取用户id
	apiLog.Info("Getting userId")
	loggedClaims, exist := c.Get("JWT_PAYLOAD")
	if !exist {
		resp.StatusCode = 57003
		if resp.StatusMsg == nil {
			resp.StatusMsg = new(string)
		}
		*resp.StatusMsg = "Unauthorized"
		c.JSON(consts.StatusOK, resp)
		return
	}
	userId := int64(loggedClaims.(jwt.MapClaims)[mw.JwtMiddleware.IdentityKey].(float64))
	apiLog.Info(userId)

	req := kitexPublish.PublishActionRequest{
		UserId: userId,
		Data:   bizReq.Data,
		Title:  bizReq.Title,
	}

	apiLog.Info("Publish Action.")
	resp, err = client.PublishAction(ctx, &req)
	apiLog.Info("After Publish Action.")

	if err != nil {
		apiLog.Fatal(err)
		resp.StatusCode = 57003
		if resp.StatusMsg == nil {
			resp.StatusMsg = new(string)
		}
		*resp.StatusMsg = err.Error()
		c.JSON(consts.StatusOK, resp)
		return
	}

	c.JSON(consts.StatusOK, resp)
}

// PublishList .
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var bizReq bizPublish.PublishListRequest
	err = c.BindAndValidate(&bizReq)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 该接口需要登录态，需要确认具体身份，仅在路由时鉴权即可
	req := kitexPublish.PublishListRequest{
		UserId: bizReq.UserID,
	}

	resp, err := client.PublishList(ctx, &req)
	if err != nil {
		apiLog.Fatal(err)
	}

	c.JSON(consts.StatusOK, resp)
}
