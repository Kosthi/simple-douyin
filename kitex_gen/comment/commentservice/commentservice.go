// Code generated by Kitex v0.6.2. DO NOT EDIT.

package commentservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	comment "simple-douyin/kitex_gen/comment"
)

func serviceInfo() *kitex.ServiceInfo {
	return commentServiceServiceInfo
}

var commentServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "CommentService"
	handlerType := (*comment.CommentService)(nil)
	methods := map[string]kitex.MethodInfo{
		"CommentAddAction": kitex.NewMethodInfo(commentAddActionHandler, newCommentServiceCommentAddActionArgs, newCommentServiceCommentAddActionResult, false),
		"CommentDelAction": kitex.NewMethodInfo(commentDelActionHandler, newCommentServiceCommentDelActionArgs, newCommentServiceCommentDelActionResult, false),
		"CommentList":      kitex.NewMethodInfo(commentListHandler, newCommentServiceCommentListArgs, newCommentServiceCommentListResult, false),
		"CommentCount":     kitex.NewMethodInfo(commentCountHandler, newCommentServiceCommentCountArgs, newCommentServiceCommentCountResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "comment",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func commentAddActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceCommentAddActionArgs)
	realResult := result.(*comment.CommentServiceCommentAddActionResult)
	success, err := handler.(comment.CommentService).CommentAddAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceCommentAddActionArgs() interface{} {
	return comment.NewCommentServiceCommentAddActionArgs()
}

func newCommentServiceCommentAddActionResult() interface{} {
	return comment.NewCommentServiceCommentAddActionResult()
}

func commentDelActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceCommentDelActionArgs)
	realResult := result.(*comment.CommentServiceCommentDelActionResult)
	success, err := handler.(comment.CommentService).CommentDelAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceCommentDelActionArgs() interface{} {
	return comment.NewCommentServiceCommentDelActionArgs()
}

func newCommentServiceCommentDelActionResult() interface{} {
	return comment.NewCommentServiceCommentDelActionResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceCommentListArgs)
	realResult := result.(*comment.CommentServiceCommentListResult)
	success, err := handler.(comment.CommentService).CommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceCommentListArgs() interface{} {
	return comment.NewCommentServiceCommentListArgs()
}

func newCommentServiceCommentListResult() interface{} {
	return comment.NewCommentServiceCommentListResult()
}

func commentCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*comment.CommentServiceCommentCountArgs)
	realResult := result.(*comment.CommentServiceCommentCountResult)
	success, err := handler.(comment.CommentService).CommentCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newCommentServiceCommentCountArgs() interface{} {
	return comment.NewCommentServiceCommentCountArgs()
}

func newCommentServiceCommentCountResult() interface{} {
	return comment.NewCommentServiceCommentCountResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CommentAddAction(ctx context.Context, req *comment.CommentAddActionRequest) (r *comment.CommentAddActionResponse, err error) {
	var _args comment.CommentServiceCommentAddActionArgs
	_args.Req = req
	var _result comment.CommentServiceCommentAddActionResult
	if err = p.c.Call(ctx, "CommentAddAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentDelAction(ctx context.Context, req *comment.CommentDelActionRequest) (r *comment.CommentDelActionResponse, err error) {
	var _args comment.CommentServiceCommentDelActionArgs
	_args.Req = req
	var _result comment.CommentServiceCommentDelActionResult
	if err = p.c.Call(ctx, "CommentDelAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, req *comment.CommentListRequest) (r *comment.CommentListResponse, err error) {
	var _args comment.CommentServiceCommentListArgs
	_args.Req = req
	var _result comment.CommentServiceCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentCount(ctx context.Context, req *comment.CommentCountRequest) (r *comment.CommentCountResponse, err error) {
	var _args comment.CommentServiceCommentCountArgs
	_args.Req = req
	var _result comment.CommentServiceCommentCountResult
	if err = p.c.Call(ctx, "CommentCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
