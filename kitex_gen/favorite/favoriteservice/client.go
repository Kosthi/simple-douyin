// Code generated by Kitex v0.6.2. DO NOT EDIT.

package favoriteservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	favorite "simple-douyin/kitex_gen/favorite"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	FavoriteAddAction(ctx context.Context, req *favorite.FavoriteAddActionRequest, callOptions ...callopt.Option) (r *favorite.FavoriteAddActionResponse, err error)
	FavoriteDelAction(ctx context.Context, req *favorite.FavoriteDelActionRequest, callOptions ...callopt.Option) (r *favorite.FavoriteDelActionResponse, err error)
	FavoriteList(ctx context.Context, req *favorite.FavoriteListRequest, callOptions ...callopt.Option) (r *favorite.FavoriteListResponse, err error)
	UserFavorCount(ctx context.Context, req *favorite.UserFavorCountRequest, callOptions ...callopt.Option) (r *favorite.UserFavorCountResponse, err error)
	VideoFavoredCount(ctx context.Context, req *favorite.VideoFavoredCountRequest, callOptions ...callopt.Option) (r *favorite.VideoFavoredCountResponse, err error)
	UserFavoredCount(ctx context.Context, req *favorite.UserFavoredCountRequest, callOptions ...callopt.Option) (r *favorite.UserFavoredCountResponse, err error)
	IsFavor(ctx context.Context, req *favorite.IsFavorRequest, callOptions ...callopt.Option) (r *favorite.IsFavorResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kFavoriteServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kFavoriteServiceClient struct {
	*kClient
}

func (p *kFavoriteServiceClient) FavoriteAddAction(ctx context.Context, req *favorite.FavoriteAddActionRequest, callOptions ...callopt.Option) (r *favorite.FavoriteAddActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteAddAction(ctx, req)
}

func (p *kFavoriteServiceClient) FavoriteDelAction(ctx context.Context, req *favorite.FavoriteDelActionRequest, callOptions ...callopt.Option) (r *favorite.FavoriteDelActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteDelAction(ctx, req)
}

func (p *kFavoriteServiceClient) FavoriteList(ctx context.Context, req *favorite.FavoriteListRequest, callOptions ...callopt.Option) (r *favorite.FavoriteListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteList(ctx, req)
}

func (p *kFavoriteServiceClient) UserFavorCount(ctx context.Context, req *favorite.UserFavorCountRequest, callOptions ...callopt.Option) (r *favorite.UserFavorCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserFavorCount(ctx, req)
}

func (p *kFavoriteServiceClient) VideoFavoredCount(ctx context.Context, req *favorite.VideoFavoredCountRequest, callOptions ...callopt.Option) (r *favorite.VideoFavoredCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoFavoredCount(ctx, req)
}

func (p *kFavoriteServiceClient) UserFavoredCount(ctx context.Context, req *favorite.UserFavoredCountRequest, callOptions ...callopt.Option) (r *favorite.UserFavoredCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UserFavoredCount(ctx, req)
}

func (p *kFavoriteServiceClient) IsFavor(ctx context.Context, req *favorite.IsFavorRequest, callOptions ...callopt.Option) (r *favorite.IsFavorResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsFavor(ctx, req)
}
