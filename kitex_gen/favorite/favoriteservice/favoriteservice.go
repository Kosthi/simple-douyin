// Code generated by Kitex v0.6.2. DO NOT EDIT.

package favoriteservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	favorite "simple-douyin/kitex_gen/favorite"
)

func serviceInfo() *kitex.ServiceInfo {
	return favoriteServiceServiceInfo
}

var favoriteServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "FavoriteService"
	handlerType := (*favorite.FavoriteService)(nil)
	methods := map[string]kitex.MethodInfo{
		"FavoriteAddAction": kitex.NewMethodInfo(favoriteAddActionHandler, newFavoriteServiceFavoriteAddActionArgs, newFavoriteServiceFavoriteAddActionResult, false),
		"FavoriteDelAction": kitex.NewMethodInfo(favoriteDelActionHandler, newFavoriteServiceFavoriteDelActionArgs, newFavoriteServiceFavoriteDelActionResult, false),
		"FavoriteList":      kitex.NewMethodInfo(favoriteListHandler, newFavoriteServiceFavoriteListArgs, newFavoriteServiceFavoriteListResult, false),
		"UserFavorCount":    kitex.NewMethodInfo(userFavorCountHandler, newFavoriteServiceUserFavorCountArgs, newFavoriteServiceUserFavorCountResult, false),
		"VideoFavoredCount": kitex.NewMethodInfo(videoFavoredCountHandler, newFavoriteServiceVideoFavoredCountArgs, newFavoriteServiceVideoFavoredCountResult, false),
		"UserFavoredCount":  kitex.NewMethodInfo(userFavoredCountHandler, newFavoriteServiceUserFavoredCountArgs, newFavoriteServiceUserFavoredCountResult, false),
		"IsFavor":           kitex.NewMethodInfo(isFavorHandler, newFavoriteServiceIsFavorArgs, newFavoriteServiceIsFavorResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "favorite",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func favoriteAddActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteAddActionArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteAddActionResult)
	success, err := handler.(favorite.FavoriteService).FavoriteAddAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteAddActionArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteAddActionArgs()
}

func newFavoriteServiceFavoriteAddActionResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteAddActionResult()
}

func favoriteDelActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteDelActionArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteDelActionResult)
	success, err := handler.(favorite.FavoriteService).FavoriteDelAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteDelActionArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteDelActionArgs()
}

func newFavoriteServiceFavoriteDelActionResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteDelActionResult()
}

func favoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceFavoriteListArgs)
	realResult := result.(*favorite.FavoriteServiceFavoriteListResult)
	success, err := handler.(favorite.FavoriteService).FavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceFavoriteListArgs() interface{} {
	return favorite.NewFavoriteServiceFavoriteListArgs()
}

func newFavoriteServiceFavoriteListResult() interface{} {
	return favorite.NewFavoriteServiceFavoriteListResult()
}

func userFavorCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceUserFavorCountArgs)
	realResult := result.(*favorite.FavoriteServiceUserFavorCountResult)
	success, err := handler.(favorite.FavoriteService).UserFavorCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceUserFavorCountArgs() interface{} {
	return favorite.NewFavoriteServiceUserFavorCountArgs()
}

func newFavoriteServiceUserFavorCountResult() interface{} {
	return favorite.NewFavoriteServiceUserFavorCountResult()
}

func videoFavoredCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceVideoFavoredCountArgs)
	realResult := result.(*favorite.FavoriteServiceVideoFavoredCountResult)
	success, err := handler.(favorite.FavoriteService).VideoFavoredCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceVideoFavoredCountArgs() interface{} {
	return favorite.NewFavoriteServiceVideoFavoredCountArgs()
}

func newFavoriteServiceVideoFavoredCountResult() interface{} {
	return favorite.NewFavoriteServiceVideoFavoredCountResult()
}

func userFavoredCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceUserFavoredCountArgs)
	realResult := result.(*favorite.FavoriteServiceUserFavoredCountResult)
	success, err := handler.(favorite.FavoriteService).UserFavoredCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceUserFavoredCountArgs() interface{} {
	return favorite.NewFavoriteServiceUserFavoredCountArgs()
}

func newFavoriteServiceUserFavoredCountResult() interface{} {
	return favorite.NewFavoriteServiceUserFavoredCountResult()
}

func isFavorHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*favorite.FavoriteServiceIsFavorArgs)
	realResult := result.(*favorite.FavoriteServiceIsFavorResult)
	success, err := handler.(favorite.FavoriteService).IsFavor(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newFavoriteServiceIsFavorArgs() interface{} {
	return favorite.NewFavoriteServiceIsFavorArgs()
}

func newFavoriteServiceIsFavorResult() interface{} {
	return favorite.NewFavoriteServiceIsFavorResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) FavoriteAddAction(ctx context.Context, req *favorite.FavoriteAddActionRequest) (r *favorite.FavoriteAddActionResponse, err error) {
	var _args favorite.FavoriteServiceFavoriteAddActionArgs
	_args.Req = req
	var _result favorite.FavoriteServiceFavoriteAddActionResult
	if err = p.c.Call(ctx, "FavoriteAddAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteDelAction(ctx context.Context, req *favorite.FavoriteDelActionRequest) (r *favorite.FavoriteDelActionResponse, err error) {
	var _args favorite.FavoriteServiceFavoriteDelActionArgs
	_args.Req = req
	var _result favorite.FavoriteServiceFavoriteDelActionResult
	if err = p.c.Call(ctx, "FavoriteDelAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteList(ctx context.Context, req *favorite.FavoriteListRequest) (r *favorite.FavoriteListResponse, err error) {
	var _args favorite.FavoriteServiceFavoriteListArgs
	_args.Req = req
	var _result favorite.FavoriteServiceFavoriteListResult
	if err = p.c.Call(ctx, "FavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserFavorCount(ctx context.Context, req *favorite.UserFavorCountRequest) (r *favorite.UserFavorCountResponse, err error) {
	var _args favorite.FavoriteServiceUserFavorCountArgs
	_args.Req = req
	var _result favorite.FavoriteServiceUserFavorCountResult
	if err = p.c.Call(ctx, "UserFavorCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoFavoredCount(ctx context.Context, req *favorite.VideoFavoredCountRequest) (r *favorite.VideoFavoredCountResponse, err error) {
	var _args favorite.FavoriteServiceVideoFavoredCountArgs
	_args.Req = req
	var _result favorite.FavoriteServiceVideoFavoredCountResult
	if err = p.c.Call(ctx, "VideoFavoredCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserFavoredCount(ctx context.Context, req *favorite.UserFavoredCountRequest) (r *favorite.UserFavoredCountResponse, err error) {
	var _args favorite.FavoriteServiceUserFavoredCountArgs
	_args.Req = req
	var _result favorite.FavoriteServiceUserFavoredCountResult
	if err = p.c.Call(ctx, "UserFavoredCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsFavor(ctx context.Context, req *favorite.IsFavorRequest) (r *favorite.IsFavorResponse, err error) {
	var _args favorite.FavoriteServiceIsFavorArgs
	_args.Req = req
	var _result favorite.FavoriteServiceIsFavorResult
	if err = p.c.Call(ctx, "IsFavor", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
